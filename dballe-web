#!/usr/bin/env python3
import argparse
import logging
import locale
import curses
import os
# import os.path
import sys
# import webbrowser
from dballe_web.application import create_app

try:
    import coloredlogs
except ModuleNotFoundError:
    coloredlogs = None

# try:
#     import gevent
# except ModuleNotFoundError:
#     gevent = None


VERSION = "0.2"

log = logging.getLogger("dballe-web")


# def start_gevent(args):
#     from gevent.pywsgi import WSGIServer
#     app = create_app(args.db)
#     log.info("Starting server on 127.0.0.1:%d", args.port)
#     http_server = WSGIServer(('127.0.0.1', args.port), app)
#     http_server.serve_forever()


def start_flask(args):
    from werkzeug import serving
    import getpass
    import socket
    app = create_app(args.db)

    # If needed, we can pass a socket as 'fd'
    # If needed, we can change server.sock to a socket we create, and set
    #    server.server_address (see BaseWSGIServer in werkzeug/serving.py
    server = serving.make_server(
            host='127.0.0.1',
            port=0 if args.port is None else int(args.port),
            app=app,
            threaded=True)

    port = server.socket.getsockname()[1]
    if args.devel:
        app.access_token = None
        start_url = f"http://localhost:{port}"
        forwarded_start_url = f"http://localhost:5000/"
    else:
        start_url = f"http://localhost:{port}/start/{app.access_token}"
        forwarded_start_url = f"http://localhost:5000/start/{app.access_token}"

    log.warning("Running on %s (Press CTRL+C to quit))", start_url)
    log.warning("Port forwarding command: ssh %s@%s -NL 5000:localhost:%d",
                getpass.getuser(), socket.getfqdn(), port)
    log.warning("Port forwarding URL: %s", forwarded_start_url)
    server.serve_forever()


class CursesHandler(logging.Handler):
    def __init__(self, window, level=logging.NOTSET):
        super().__init__(level)
        self.window = window
        self.window.scrollok(True)
        self.window.idlok(True)
        self.window.leaveok(True)

    def emit(self, record):
        try:
            msg = self.format(record)
            self.window.addstr("\n" + msg)
            self.window.refresh()
        except Exception:
            self.handleError(record)


def tui_main(stdscr, args):
    FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"
    formatter = logging.Formatter(FORMAT, style='%')

    handler = CursesHandler(stdscr)
    handler.setFormatter(formatter)
    logging.getLogger().addHandler(handler)

    # if coloredlogs is not None:
    #     coloredlogs.install(level=log_level, fmt=FORMAT, stream=sys.stderr)
    # else:
    #     logging.basicConfig(level=log_level, stream=sys.stderr, format=FORMAT)

    start_flask(args)


def main():
    parser = argparse.ArgumentParser(
            description="Explore a DB-All.e database interactively using a web interface")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="verbose output")
    parser.add_argument("--port", "--web-port", type=str, default=None,
                        help="listening port for web interface. Default: automatically allocate a free port")
    parser.add_argument("--devel", action="store_true",
                        help="development mode: disable access token checks to allow restarting dballe-web"
                             " without needing to restart the browser session")
    parser.add_argument("db", type=str, metavar="dballe_url", default=os.environ.get("DBA_DB"),
                        help="DB-All.e database to connect to")
    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN
    logging.getLogger().setLevel(log_level)

    locale.setlocale(locale.LC_ALL, '')
    code = locale.getpreferredencoding()

    # app = DballeWeb()
    # app.setup()
    # url = "http://127.0.0.1:{}/".format(app.port)
    # print("dballe-web URL:", url)
    # webbrowser.open(url)

    curses.wrapper(tui_main, args)
    # if gevent is None:
    #     start_flask(args)
    # else:
    #     start_gevent(args)


if __name__ == "__main__":
    sys.exit(main())
