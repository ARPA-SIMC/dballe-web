#!/usr/bin/env python3
import argparse
import logging
import os
# import os.path
import sys
# import webbrowser
from dballe_web.application import create_app

try:
    import coloredlogs
except ModuleNotFoundError:
    coloredlogs = None

try:
    import gevent
except ModuleNotFoundError:
    gevent = None


VERSION = "0.2"

log = logging.getLogger("dballe-web")


def start_gevent(args):
    from gevent.pywsgi import WSGIServer
    app = create_app(args.db)
    log.info("Starting server on 127.0.0.1:%d", args.port)
    http_server = WSGIServer(('127.0.0.1', args.port), app)
    http_server.serve_forever()


def start_flask(args):
    app = create_app(args.db)
    log.info("Starting server on 127.0.0.1:%d", args.port)
    app.run(host="127.0.0.1", port=args.port)


def main():
    parser = argparse.ArgumentParser(
            description="Explore a DB-All.e database interactively using a web interface")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="verbose output")
    parser.add_argument("--port", "--web-port", type=int, default=5000,
                        help="listening port for web interface")
    parser.add_argument("db", type=str, metavar="dballe_url", default=os.environ.get("DBA_DB"),
                        help="DB-All.e database to connect to")
    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN

    FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"

    if coloredlogs is not None:
        coloredlogs.install(level=log_level, fmt=FORMAT, stream=sys.stderr)
    else:
        logging.basicConfig(level=log_level, stream=sys.stderr, format=FORMAT)

    # app = DballeWeb()
    # app.setup()
    # url = "http://127.0.0.1:{}/".format(app.port)
    # print("dballe-web URL:", url)
    # webbrowser.open(url)

    if gevent is None:
        start_flask(args)
    else:
        start_gevent(args)


if __name__ == "__main__":
    sys.exit(main())
