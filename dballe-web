#!/usr/bin/env python3
import argparse
import logging
# import os
# import os.path
import sys
# import webbrowser
# from dballe_web.webserver import Application
# from tornado.options import define, options
# from tornado.platform.asyncio import AsyncIOMainLoop
# import tornado.httpserver
# import tornado.netutil
# import asyncio
# AsyncIOMainLoop().install()

try:
    import coloredlogs
except ModuleNotFoundError:
    coloredlogs = None

try:
    import gevent
except ModuleNotFoundError:
    gevent = None


VERSION = "0.2"

log = logging.getLogger("dballe-web")


def start_gevent(args):
    from dballe_web.application import app
    from gevent.pywsgi import WSGIServer
    log.info("Starting server on 127.0.0.1:%d", args.port)
    http_server = WSGIServer(('127.0.0.1', args.port), app)
    http_server.serve_forever()


def start_flask(args):
    from dballe_web.application import app
    log.info("Starting server on 127.0.0.1:%d", args.port)
    app.run(host="127.0.0.1", port=args.port)


# class DballeWeb:
#     def __init__(self):
#         self.db_url = options.db
#         self.web_host = "localhost"
#         self.web_port = options.web_port
#
#     def setup(self):
#         # Set up web server on a free port
#         self.application = Application(self.db_url)
#
#         if self.web_port is None:
#             sockets = tornado.netutil.bind_sockets(0, '127.0.0.1')
#             self.web_port = sockets[0].getsockname()[:2][1]
#             server = tornado.httpserver.HTTPServer(self.application)
#             server.add_sockets(sockets)
#         else:
#             server = tornado.httpserver.HTTPServer(self.application)
#             server.listen(self.web_port)
#
#     @asyncio.coroutine
#     def async_setup(self):
#         yield from self.application.async_setup()


def main():
    parser = argparse.ArgumentParser(
            description="Explore a DB-All.e database interactively using a web interface")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="verbose output")
    parser.add_argument("--port", "--web-port", type=int, default=5000,
                        help="listening port for web interface")
    args = parser.parse_args()

    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN

    FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"

    if coloredlogs is not None:
        coloredlogs.install(level=log_level, fmt=FORMAT, stream=sys.stderr)
    else:
        logging.basicConfig(level=log_level, stream=sys.stderr, format=FORMAT)

    # # define("web_host", default="127.0.0.1", help="listening hostname for web interface")
    # define("db", type=str, metavar="dballe_url", default=os.environ.get("DBA_DB"),
    #        help="DB-All.e database to connect to")
    # options.parse_command_line()

    # if not options.db:
    #     print("Please provide a database URL with --db", file=sys.stderr)
    #     options.print_help()
    #     return 1

    # app = DballeWeb()
    # app.setup()
    # url = "http://{}:{}/".format(app.web_host, app.web_port)
    # print("dballe-web URL:", url)
    # webbrowser.open(url)

    # def _on_init():
    #     asyncio.get_event_loop().create_task(app.async_setup())
    # asyncio.get_event_loop().call_soon(_on_init)
    # asyncio.get_event_loop().run_forever()

    if gevent is None:
        start_flask(args)
    else:
        start_gevent(args)


if __name__ == "__main__":
    sys.exit(main())
